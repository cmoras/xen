#!/usr/local/bin/python3.7
import os
import re

import glob
import re

import getpass

from subprocess import PIPE, Popen

flag=0

for i in os.get_exec_path():
	os.chdir(i)
	list=os.listdir()
	for j in list:
		if flag == 1:
			break;
		if re.search(r'xl$', j):
			XL=os.path.join(i,"xl")
			FLAG=1
		elif re.search(r'xm$', j):
			XM=os.path.join(i, "xm")
			FLAG=1
##
##the first section of identifying which of  xl or xm is being used completes here.
##

#startig with the main program

import argparse


parser = argparse.ArgumentParser()
parser.add_argument('-x', '--show_vmnames', help='List of vmnames along with hostnames', action='store_value')
parser.add_argument('-a', '--show_pooldetails', help='Check current details wrt cpu', action='store_true')
parser.add_argument('-s', '--set_pool', help='create new pool as per NUMA acrchitecture' action='store_true')

args=parser.parse_args()


def cfg_parse(i):
	with open(i) as file:
		for line in file:
			line = line.strip()
			[hm.append(match) for match in re.findall(r'host.*', line)]
			[hm.append(match) for match in re.findall(r'memory.*', line)]
			[hm.append(match) for match in re.findall(r'^disk.*', line)]
			[hm.append(match) for match in re.findall(r'^cpu.*', line)]
			[hm.append(match) for match in re.findall(r'^name.*', line)]
			[hm.append(match) for match in re.findall(r'^vcpu.*', line)]
			hm.append("\n")
	print(hm)

##################################################################################################
### this function needs to be looksed into.  if possible merged with vm_pool function defition.### 
##################################################################################################
def check_vm_pool_status(line):
	p2=Popen(["xl", "vcpu-list"], stdout=PIPE)
        out,error=p2.communicate()

        temp=[]
        temp1=[]
        pool0_cnt=0
        pool1_cnt=0

	for i in out.split('\n'):
		if vmname in i:
			print(i.split('   '))
			temp.append(i.split('   ')[12])
	for j in temp:
		if j.lstrip(' ') in pool0_list:
			pool0_cnt+=1
		if j.lstrip(' ') in pool1_list:
			pool1_cnt+=1

	for i in out.split('\n'):
		if vmname in i:
			temp1.append(i.split('  ')[0])
        ##
	##starting with the comparision here
        ##

	print(pool0_cnt)
	print(len(temp1))

	if len(temp1) == pool0_cnt:
		print("pool0")
	elif len(temp1) == pool1_cnt:
		print("pool1")
	else:
		print("no pooling on the host node. Check. the show pool option")
		flag="unknown"
	
	return flag
	

def vm_pool(vmname):
	p2=Popen(["xl", "vcpu-list"], stdout=PIPE)
	out,error=p2.communicate()
	
	temp=[]
	temp1=[]
	pool0_cnt=0
	pool1_cnt=0
	
	for i in out.split('\n'):
		if vmname in i:
			print(i.split('   '))
			temp.append(i.split('   ')[12])
			
	for j in temp:
		if j.lstrip(' ') in pool0_list:
			pool0_cnt+=1
		if j.lstrip(' ') in pool1_list:
			pool1_cnt+=1

	for i in out.split('\n'):
		if vmname in i:
			temp1.append(i.split('  ')[0])
	##
	##starting with the comparision here
	##
	
	print(pool0_cnt)
	print(len(temp1))
	
	if len(temp1) == pool0_cnt:
		print("pool0")
	elif len(temp1) == pool1_cnt:
		print("pool1")
	else:
		print("no pooling on the host node. Check. the show pool option")
		flag="unknown"
	

def vm_pool_migrate(line, pool0_name, pool1_name):
	p3=Popen(["xl", "-vf", "cpupool-migrate", "line", "pool1_name"], stdout=PIPE)
	out,error=p3.communicate()
	
def test_os():
	if os.path.exists('/usr/bin/apt'):
		print("[*]Debian variant")
		apt=1
		return apt
	elif os.path.exists('/usr/bin/yum'):
		print("[*]RHEL variant")
		yum=1
		retunr yum
	else:
		print("[!!]Support not available for this varaint as of now. Raise a isseu in the github repo link")



def numa_split():
	print("[+]Lets being the split")
	p7=Popen(["xl", "cpupool-numa-split"], stdout=PIPE)
		out,error=p7.communicate()
	print("[+]New pool created")

def manual_pool_create():
	print("[+]Lets being the split")
	p8=Popen(["xl", "cpupool-create", ], stdout=PIPE)
		out,error=p8.communicate()
	print("[+]New pool created")


def install_package(apt, yum):
	name=getpass.getuser()
	if not name == "root":
		print("[!!]Pssst!!!, not root, but i wont tell anyone, just quickly change back to root and run me")
		exit 1
	else:
		print("[+]Good human , looks like you took my advice.")
		
		if apt  == "1":
##
#didnt come across any apt module, so going ahead with subprocess
##
			if  os.path.exists('/usr/bin/numactl'):
				print("[+]Package already present. Movng to testing the arch")
			else:
				p5=Popen(["apt-get", "install", "numactl"], stdout=PIPE)
				out,error=p5.communicate()
				print("[*]Installed numactl package")
				success=1
				return success
		elif yum == "1":
##using yum module for this 
			import yum 
			yb=yum.Yumbase()
			if yb.rpmdb.searchNevra(name='numactl'):
				print("[+]Package already present. Movng to testing the arch")
			else:
				yb.install(name='numactl')
				print("[*]Installed numactl package")
				success=1
				return success
		else:
			print("[!!]Distribution/Varaint unknown. Handle manually")
			success=0
			return success



if (args.show_vmnames):
	condition=0
	print("[+] Available vm on the system under xen are")
	os.chdir('/home/xen')
	list0=os.listdir(os.getcwd())
	for i in list0:
		print(i, end=" ")
	print("[+] Do you more details on vm ?")
	print("[+] Type Y/y to proceed and N/n to exit out of this loop")
#condition here need to be thought out 
	while True:
		choice=input("your choice : ")
		if (choice=="y") or (choice=='Y'):
			print("[+]Proceeding. Do you want deatisl of a particular vm or all of the vm's")
			print("[+] if one vm, then enter the /vmname/, else type /all/")
			choice_vm_all=input("your choice : ")
			if choice_vm_all == "all":
				hm=[]
				for i in glob.glob('**/*.cfg', recursive=True):
					#        with open(i) as file:
				        #        for line in file:
				        #                line = line.strip()
				        #                [hm.append(match) for match in re.findall(r'host.*', line)]
				        #                [hm.append(match) for match in re.findall(r'memory.*', line)]
				        #                [hm.append(match) for match in re.findall(r'^disk.*', line)]
					#        hm.append("\n")
					#print(hm)
				cfg_parse(i)
			else:
				vmname=raw_input("Eneter the vm number that you want more etails of")
				match_choice_vm_all=re.search(r'^vm.*', vmname) 
				print(f"[+] getting details of {match_choice_vm_all}")
				cfg_parse(i)
		else:
			break; 
			#maybe even break 2 <-- this needs to be tested.



if(args.show_pooldetails):
	p1=Popen(["xl", "cpupool-list", "-c"], stdout=PIPE)
	out,error=p1.communicate()
	list=out.decode('ascii').split('\n')
##
##
##you should get something like for instance
##>>list
##[u'Name               CPU list', u'Pool-node0         0,1,2,3,4,5,6,7,8,9,10,11', u'Pool-node1         12,13,14,15,16,17,18,19,20,21,22,23', u'']
##
##
	pool0_list=list[1].encode('utf-8').split('       ')[1].lstrip(' ').split(',')
	pool1_list=list[2].encode('utf-8').split('       ')[1].lstrip(' ').split(',')
	pool0_name=list[1].encode('utf-8').split('      ')[0]
	pool1_name=list[2].encode('utf-8').split('	')[0]



##########################################################################################################################
### edit needed here, it should only proceed her if there is more than one pool.  else we should skip out witha message###
##########################################################################################################################

	print("[+]Do you want ot find out pool-status of any vm's?")
	ch=input("Choice: ? y/n")
	if ch == 'y':
		vmname=raw_input("Enter the vmname:")

		vm_pool(vmname)
	else:
		print("[+]Have a nice day!!!!")

	print("[+]Do you want ot check the status of the vm's that have been moved to pool1 from pool0.")
	print("[!!!]This is important, as in our setup, the vm once rebooted via solus panel or host node revert back to pool0 , but leaving pool1 entry as is...")
	print("[!!!]...So it is important you check this atleast once.)
###
##This section will be as important as i will writing a fuction to push a cron to move the vm back to the new-pool. but for now important.
###
	ch=''
	ch=input("Choice: ? y/n")
	if ch == 'y':
		os.chdir('/etc/xen')
		with open('list.cpupool')  as it:
			for line in it:
				result=check_vm_pool_status(line)
				if "unknown" in result:
					vm_pool_migrate(line, pool0_name, pool1_name)
					result=check_vm_pool_status(line)
					if "unknown" in result:
						print("[+]Severe error, manual intervention required")
						break
					else:
						print(f"[+]{line} has been migrated to {pool1_name}")
				else:
					print("We are good!!!! have a cookie")
	else:
		print("[+]Now if something breaks on the server. I will blame you!!!!")

##################################################
#######That should end our vm migration bit#######
##################################################


if (args.set_pool):
	print("[+]Starting with thei section , as there are now pools set.")
	p4=Popen(["xl", "cpupool-list", "-c"], stdout=PIPE)
	out,error=p4.communicate()

	list=out.decode('ascii').split('\n')

####
##Lets hold a little test of our own  to check pools are presnet
##All of the redundant code  will be converted into  function once i get the whole picture"
####
	if len(list) < 3:
		print("[+]This is simpy means that th pool is not created,  ans that the there is  default pool available")

		print("[+]Lets begin by starting the pool creation.")
		print("[!!]The are 2 methods: ")
		print("--numa-split :  this entriely depends on if the cpu supports NUMA build")
		print("--create-pool : will default to this  if numa split is not available.")
		print("[+]First lets test what the distribution  in order to check for installation")
		value=test_os()

		success_op=install_package()
		
		if success_op == "1":
			print("[+]Printing numanode output:")
			print("----------------------------")
			p6=Popen(["numactl", "--hardware"], stdout=PIPE)
			out,error=p6.communicate()
			
			for i in (out.decode('utf-8').split('\n')):
				line=i.encode('utf-8')
				match=re.findall(r'available:\s(\d\snodes)', line)
				temp.append(match)
			string=temp[0][0]
			print(f"Available nodes on the arch : {string}")
			print("[*]This means that we can go ahead with numa-splitting")
		else:
			print("[!!]Package was not installed. So we not be going any forward.)
	print("[?]Confirmation to proceed with numa-splitting : ")
	ch=''
	ch=input("Choice: ? y/n")
	if ch == 'y':
		numa_split()
	 else:
                print("[+]Not proceeding with num split")
	
	print("[?]Confirmation to proceed with numa-splitting : ")
	ch=''
	ch=input("Choice: ? y/n")
	if ch == 'y':
		normal_split()
	else:
		print("[+]Not proceeding with normal split")

	

			
		
KeyboardInterrupt
>>> from subprocess import PIPE,Popen

>>> 
>>> 
>>> 
>>> 
>>> p1=Popen(["numactl", "--hardware"], stdout=PIPE)
>>> out,error=p1.communicate()
>>> 
>>> out
b'available: 1 nodes (0)\nnode 0 cpus: 0 1 2 3\nnode 0 size: 3833 MB\nnode 0 free: 160 MB\nnode distances:\nnode   0 \n  0:  10 \n'
>>> out.decode('utf-8')
'available: 1 nodes (0)\nnode 0 cpus: 0 1 2 3\nnode 0 size: 3833 MB\nnode 0 free: 160 MB\nnode distances:\nnode   0 \n  0:  10 \n'
>>> out.decode('utf-8').split('\n')
['available: 1 nodes (0)', 'node 0 cpus: 0 1 2 3', 'node 0 size: 3833 MB', 'node 0 free: 160 MB', 'node distances:', 'node   0 ', '  0:  10 ', '']
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> for i in (out.decode('utf-8').split('\n')):
...     print(i)
... 
available: 1 nodes (0)
node 0 cpus: 0 1 2 3
node 0 size: 3833 MB
node 0 free: 160 MB
node distances:
node   0 
  0:  10 

