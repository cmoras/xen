import os
import re

import glob
import re

from subprocess import PIPE, Popen

flag=0

for i in os.get_exec_path():
	os.chdir(i)
	list=os.listdir()
	for j in list:
		if flag == 1:
			break;
		if re.search(r'xl$', j):
			XL=os.path.join(i,"xl")
			FLAG=1
		elif re.search(r'xm$', j):
			XM=os.path.join(i, "xm")
			FLAG=1
##
##the first section of identifying which of  xl or xm is being used completes here.
##

#startig with the main program

import argparse


parser = argparse.ArgumentParser()
parser.add_argument('-x', '--show_vmnames', help='List of vmnames along with hostnames', action='store_value')
parser.add_argument('-a', '--show_pooldetails', help='Check current details wrt cpu', action='store_true')
parser.add_argument('-s', '--set_pool', help='create new pool as per NUMA acrchitecture' action='store_true')

args=parser.parse_args()


def cfg_parse(i):
	with open(i) as file:
		for line in file:
			line = line.strip()
			[hm.append(match) for match in re.findall(r'host.*', line)]
			[hm.append(match) for match in re.findall(r'memory.*', line)]
			[hm.append(match) for match in re.findall(r'^disk.*', line)]
			[hm.append(match) for match in re.findall(r'^cpu.*', line)]
			[hm.append(match) for match in re.findall(r'^name.*', line)]
			[hm.append(match) for match in re.findall(r'^vcpu.*', line)]
			hm.append("\n")
	print(hm)
	

def vm_pool(vmname):
	p2=Popen(["xl", "vcpu-list"], stdout=PIPE)
	out,error=p2.communicate()
	
	temp=[]
	temp1=[]
	pool0_cnt=0
	pool1_cnt=0
	
	for i in out.split('\n'):
		if vmname in i:
			print(i.split('   '))
			temp.append(i.split('   ')[12])
			
	for j in temp:
		if j.lstrip(' ') in pool0_list:
			pool0_cnt+=1
		if j.lstrip(' ') in pool1_list:
			pool1_cnt+=1

	for i in out.split('\n'):
		if vmname in i:
			temp1.append(i.split('  ')[0])
	##
	##starting with the comparision here
	##
	
	print(pool0_cnt)
	print(len(temp1))
	
	if len(temp1) == pool0_cnt:
		print("pool0")
	elif len(temp1) == pool1_cnt:
		print("pool1")
	else:
		print("no pooling on the host node. Check. the show pool option")
		flag="unknown"
	





if (args.show_vmnames):
	condition=0
	print("[+] Available vm on the system under xen are")
	os.chdir('/home/xen')
	list0=os.listdir(os.getcwd())
	for i in list0:
		print(i, end=" ")
	print("[+] Do you more details on vm ?")
	print("[+] Type Y/y to proceed and N/n to exit out of this loop")
#condition here need to be thought out 
	while True:
		choice=input("your choice : ")
		if (choice=="y") or (choice=='Y'):
			print("[+]Proceeding. Do you want deatisl of a particular vm or all of the vm's")
			print("[+] if one vm, then enter the /vmname/, else type /all/")
			choice_vm_all=input("your choice : ")
			if choice_vm_all == "all":
				hm=[]
				for i in glob.glob('**/*.cfg', recursive=True):
					#        with open(i) as file:
				        #        for line in file:
				        #                line = line.strip()
				        #                [hm.append(match) for match in re.findall(r'host.*', line)]
				        #                [hm.append(match) for match in re.findall(r'memory.*', line)]
				        #                [hm.append(match) for match in re.findall(r'^disk.*', line)]
					#        hm.append("\n")
					#print(hm)
				cfg_parse(i)
			else:
				vmname=raw_input("Eneter the vm number that you want more etails of")
				match_choice_vm_all=re.search(r'^vm.*', vmname) 
				print(f"[+] getting details of {match_choice_vm_all}"
				cfg_parse(i)
		else:
			break; 
			#maybe even break 2 <-- this needs to be tested.


	
if(args.show_pooldetails):
	p1=Popen(["xl", "cpupool-list", "-c"], stdout=PIPE)			
	out,error=p1.communicate()
	list=out.decode('ascii').split('\n')
##
##
##you should get something like for instance 
##>>list
##[u'Name               CPU list', u'Pool-node0         0,1,2,3,4,5,6,7,8,9,10,11', u'Pool-node1         12,13,14,15,16,17,18,19,20,21,22,23', u'']
##
##
	pool0_list=list[1].encode('utf-8').split('       ')[1].lstrip(' ').split(',')
	pool1_list=list[2].encode('utf-8').split('       ')[1].lstrip(' ').split(',')
	
	print("[+]Do you want ot find out pool-status of any vm's?")
	ch=input("Choice: ? y/n")
	if ch == y:
		vmname=raw_input("Enter the vmname:")
			
		vm_pool(vmname)
	else:
		print("[+]Have a nice day")
	
	print("[+]Do you want ot check the status of the vm's that have been moved to pool1 from pool0.")
	print("[!!!]This is important, as in our setup, the vm once rebooted via solus panel or host node revert back to pool0 , but leaving pool1 entry as is...")
	print("[!!!]...So it is important you check this atleast once.)
###
##This section will be as important as i will writing a fuction to push a cron to move the vm back to the new-pool. but for now important.
###
		

	
